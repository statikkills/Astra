import requests
from bs4 import BeautifulSoup
import re
import webbrowser
import os
import sys
import subprocess
from colorama import init, Fore, Back, Style
from urllib.parse import urlparse
import time
from pystyle import Colors, Colorate, Write, Center, Box
import phonenumbers
from phonenumbers import carrier, geocoder
import json

init(autoreset=True)

WEB_API_URL = "https://htmlweb.ru/geo/api.php?json&telcod="

def install_libraries():
    libraries = ['requests', 'bs4', 'colorama', 'urllib3', 'pystyle', 'phonenumbers']
    for lib in libraries:
        try:
            __import__(lib)
        except ImportError:
            print(f"{Fore.MAGENTA}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {lib}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", lib])

def get_web_data(phone_number):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–º–µ—Ä–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API"""
    try:
        clean_number = phone_number.replace("+", "")

        response = requests.get(
            f"{WEB_API_URL}{clean_number}",
            headers={
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
            },
            timeout=10
        )

        if response.status_code == 200:
            return response.json()
        return {}
    except:
        return {}

class PhoneAnalyzer:
    def __init__(self, phone_number):
        self.phone_number = phone_number
        self.results = {
            "basic_info": {},
            "web_info": {}
        }
        self.parsed_number = None

    def validate_and_parse(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–º–µ—Ä–∞"""
        try:
            cleaned_number = re.sub(r'[^\d+]', '', self.phone_number)

            if cleaned_number.startswith('8') and len(cleaned_number) == 11:
                cleaned_number = '+7' + cleaned_number[1:]

            self.parsed_number = phonenumbers.parse(cleaned_number, None)

            if not phonenumbers.is_valid_number(self.parsed_number):
                return False

            country = geocoder.description_for_number(self.parsed_number, "ru")
            operator = carrier.name_for_number(self.parsed_number, "ru")

            self.results["basic_info"] = {
                "is_valid": True,
                "country": country,
                "operator": operator,
                "national_format": phonenumbers.format_number(
                    self.parsed_number, phonenumbers.PhoneNumberFormat.NATIONAL
                ),
                "international_format": phonenumbers.format_number(
                    self.parsed_number, phonenumbers.PhoneNumberFormat.INTERNATIONAL
                ),
                "e164_format": phonenumbers.format_number(
                    self.parsed_number, phonenumbers.PhoneNumberFormat.E164
                )
            }
            return True
        except:
            return False

    def check_web_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API"""
        web_data = get_web_data(self.phone_number)
        if web_data:
            self.results["web_info"] = {
                "postal": web_data.get("0", {}).get("post", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "region": web_data.get("region", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "autocod": web_data.get("region", {}).get("autocod", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "operator": web_data.get("0", {}).get("oper", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "brand": web_data.get("0", {}).get("oper_brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "latitude": web_data.get("0", {}).get("latitude", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "longitude": web_data.get("0", {}).get("longitude", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "capital": web_data.get("capital", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                "country": web_data.get("country", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            }
            return True
        return False

    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        if not self.validate_and_parse():
            return False

        self.check_web_info()

        return True

def display_phone_results(results):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏"""
    basic = results["basic_info"]
    web_info = results.get("web_info", {})

    Write.Print("\n" + "‚ïê" * 60 + "\n", Colors.purple_to_blue, interval=0.01)
    Write.Print("üì± –ê–ù–ê–õ–ò–ó –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê\n", Colors.purple_to_blue, interval=0.01)
    Write.Print("‚ïê" * 60 + "\n", Colors.purple_to_blue, interval=0.01)
    
    Write.Print("–û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n", Colors.blue_to_purple, interval=0.01)
    print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ –ù–æ–º–µ—Ä: {basic.get('international_format', 'N/A')}", 1))
    print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {basic.get('national_format', 'N/A')}", 1))
    print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {basic.get('country', 'N/A')}", 1))
    print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: {basic.get('operator', 'N/A')}", 1))
    print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ –í–∞–ª–∏–¥–Ω—ã–π: {'–î–∞' if basic.get('is_valid') else '–ù–µ—Ç'}", 1))

    if web_info:
        Write.Print("\n–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (htmlweb.ru):\n", Colors.blue_to_purple, interval=0.01)
        
        if web_info.get('region') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {web_info['region']}", 1))
        
        if web_info.get('postal') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {web_info['postal']}", 1))
        
        if web_info.get('autocod') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ –ê–≤—Ç–æ–Ω–æ–º–µ—Ä —Ä–µ–≥–∏–æ–Ω–∞: {web_info['autocod']}", 1))
        
        if web_info.get('operator') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: {web_info['operator']}", 1))
        
        if web_info.get('brand') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ –ë—Ä–µ–Ω–¥: {web_info['brand']}", 1))
        
        if web_info.get('latitude') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and web_info.get('longitude') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {web_info['latitude']}, {web_info['longitude']}", 1))
            maps_url = f"https://www.google.com/maps?q={web_info['latitude']},{web_info['longitude']}"
            print(Colorate.Horizontal(Colors.blue_to_purple, f"‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—ã: {maps_url}", 1))
        
        if web_info.get('capital') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ –°—Ç–æ–ª–∏—Ü–∞: {web_info['capital']}", 1))
        
        if web_info.get('country') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {web_info['country']}", 1))

    Write.Print("\n–ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò:\n", Colors.blue_to_purple, interval=0.01)
    e164_clean = basic.get('e164_format', '').replace('+', '')
    print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ WhatsApp: https://wa.me/{e164_clean}", 1))
    print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ Viber: https://viber.click/{e164_clean}", 1))
    print(Colorate.Horizontal(Colors.purple_to_blue, f"‚Ä¢ Telegram: https://t.me/{e164_clean}", 1))
    
    Write.Print("\n" + "‚ïê" * 60 + "\n", Colors.purple_to_blue, interval=0.01)

def search_phone_number(phone_number):
    url = "https://www.google.com/search?q={}".format(phone_number)
    
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        search_results = soup.find_all('a', href=True)
        
        excluded_domains = ['google.com', 'yandex.ru', 'bing.com', 'maps.google.com']
        
        unique_links = set()
        
        for link in search_results:
            href = link.get('href', '')
            match = re.search(r'(https?://[^&]+)', href)
            if match:
                url = match.group(1)
                parsed_url = urlparse(url)
                if not any(domain in parsed_url.netloc for domain in excluded_domains):
                    unique_links.add(url)
        
        return list(unique_links)
        
    except requests.RequestException as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

def save_links_to_html(links, phone_number, analysis_results, filename="search_results.html"):
    css_styles = """
        <style>
        * { box-sizing: border-box; margin: 0; padding: 0; }
        body { 
            font-family: 'Segoe UI', Tahoma, sans-serif; 
            background: linear-gradient(135deg, #2d1b69 0%, #1a1033 100%);
            color: #e6e6fa;
            min-height: 100vh;
        }
        .container { 
            max-width: 900px; 
            margin: 0 auto; 
            padding: 40px 20px;
        }
        h1 { 
            text-align: center; 
            margin-bottom: 30px; 
            font-size: 2.5em; 
            color: #b19cd9;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        .phone-info {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(177, 156, 217, 0.1);
            border-radius: 8px;
            border: 1px solid #9370db;
        }
        .analysis-section {
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(177, 156, 217, 0.05);
            border-radius: 8px;
            border: 1px solid #9370db;
        }
        .analysis-section h3 {
            color: #b19cd9;
            margin-bottom: 15px;
        }
        .analysis-item {
            margin-bottom: 8px;
            padding: 5px 0;
        }
        .stats {
            text-align: center;
            margin-bottom: 20px;
            font-size: 1.1em;
            color: #d8bfd8;
        }
        .link-list { 
            list-style-type: none; 
        }
        .link-item { 
            margin-bottom: 15px; 
            padding: 20px; 
            background: rgba(177, 156, 217, 0.1);
            border: 1px solid #9370db;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        .link-item:hover { 
            transform: translateY(-3px);
            background: rgba(177, 156, 217, 0.2);
            box-shadow: 0 5px 15px rgba(147, 112, 219, 0.3);
        }
        .link-item a { 
            display: block; 
            color: #b19cd9; 
            text-decoration: none; 
            font-size: 1.1em;
            font-weight: 500;
            transition: color 0.3s ease;
        }
        .link-item a:hover { 
            color: #da70d6; 
        }
        .domain {
            font-size: 0.9em;
            color: #d8bfd8;
            margin-top: 5px;
        }
        .timestamp {
            text-align: center;
            margin-top: 30px;
            color: #9370db;
            font-style: italic;
        }
        </style>
    """

    analysis_html = ""
    if "basic_info" in analysis_results:
        basic = analysis_results["basic_info"]
        web_info = analysis_results.get("web_info", {})
        
        analysis_html = f"""
        <div class="analysis-section">
            <h3>üì± –ê–Ω–∞–ª–∏–∑ –Ω–æ–º–µ—Ä–∞</h3>
            <div class="analysis-item"><strong>–ù–æ–º–µ—Ä:</strong> {basic.get('international_format', 'N/A')}</div>
            <div class="analysis-item"><strong>–°—Ç—Ä–∞–Ω–∞:</strong> {basic.get('country', 'N/A')}</div>
            <div class="analysis-item"><strong>–û–ø–µ—Ä–∞—Ç–æ—Ä:</strong> {basic.get('operator', 'N/A')}</div>
            <div class="analysis-item"><strong>–í–∞–ª–∏–¥–Ω—ã–π:</strong> {'–î–∞' if basic.get('is_valid') else '–ù–µ—Ç'}</div>
        """
        
        if web_info:
            if web_info.get('region') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                analysis_html += f'<div class="analysis-item"><strong>–†–µ–≥–∏–æ–Ω:</strong> {web_info["region"]}</div>'
            
            if web_info.get('postal') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                analysis_html += f'<div class="analysis-item"><strong>–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:</strong> {web_info["postal"]}</div>'
            
            if web_info.get('autocod') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                analysis_html += f'<div class="analysis-item"><strong>–ê–≤—Ç–æ–Ω–æ–º–µ—Ä —Ä–µ–≥–∏–æ–Ω–∞:</strong> {web_info["autocod"]}</div>'
            
            if web_info.get('operator') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                analysis_html += f'<div class="analysis-item"><strong>–û–ø–µ—Ä–∞—Ç–æ—Ä (API):</strong> {web_info["operator"]}</div>'
            
            if web_info.get('brand') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                analysis_html += f'<div class="analysis-item"><strong>–ë—Ä–µ–Ω–¥:</strong> {web_info["brand"]}</div>'
            
            if web_info.get('latitude') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and web_info.get('longitude') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                analysis_html += f'<div class="analysis-item"><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> {web_info["latitude"]}, {web_info["longitude"]}</div>'
                maps_url = f"https://www.google.com/maps?q={web_info['latitude']},{web_info['longitude']}"
                analysis_html += f'<div class="analysis-item"><strong>–ö–∞—Ä—Ç—ã:</strong> <a href="{maps_url}" target="_blank">{maps_url}</a></div>'
            
            if web_info.get('capital') != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                analysis_html += f'<div class="analysis-item"><strong>–°—Ç–æ–ª–∏—Ü–∞:</strong> {web_info["capital"]}</div>'
        
        analysis_html += "</div>"

    links_html = ''.join([
        f'<li class="link-item"><a href="{link}" target="_blank">{link}</a>'
        f'<div class="domain">–î–æ–º–µ–Ω: {urlparse(link).netloc}</div></li>'
        for link in links
    ])
    
    html_template = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</title>
    {}
</head>
<body>
    <div class="container">
        <h1>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h1>
        <div class="phone-info">
            <h3>–ê–Ω–∞–ª–∏–∑ –Ω–æ–º–µ—Ä–∞: {}</h3>
        </div>
        {}
        <div class="stats">–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {}</div>
        <ul class="link-list">
            {}
        </ul>
        <div class="timestamp">–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {}</div>
    </div>
</body>
</html>"""
    
    html_content = html_template.format(
        css_styles, 
        phone_number,
        analysis_html,
        len(links), 
        links_html,
        time.strftime("%Y-%m-%d %H:%M:%S")
    )
    
    with open(filename, "w", encoding="utf-8") as f:
        f.write(html_content)
    
    return filename

def clear_console():
    os.system('cls' if os.name == 'nt' else 'clear')

def print_banner():
    banner = r"""
    _    ____ _____ ____      _    
   / \  / ___|_   _|  _ \    / \   
  / _ \ \___ \ | | | |_) |  / _ \  
 / ___ \ ___) || | |  _ <  / ___ \ 
/_/   \_\____/ |_| |_| \_\/_/   \_\   
"""
    
    title = "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ + –ê–Ω–∞–ª–∏–∑"
    credits = "–¢–ì–ö - @statikkills_dev | –î–µ–∫–æ–¥–Ω—É–ª - @statikkills"
    
    print(Colorate.Horizontal(Colors.purple_to_blue, banner, 1))
    print(Center.XCenter(Colorate.Horizontal(Colors.purple_to_blue, title, 1)))
    print(Center.XCenter(Colorate.Horizontal(Colors.purple_to_blue, credits, 1)))
    print()

def print_links_to_console(links):
    if not links:
        Write.Print("‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n", Colors.red_to_purple, interval=0.01)
        return
        
    Write.Print(f"\nüåê –ù–∞–π–¥–µ–Ω–æ {len(links)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n", Colors.purple_to_blue, interval=0.01)
    
    for i, link in enumerate(links, 1):
        domain = urlparse(link).netloc
        link_text = f"{i:2d}. {link}"
        domain_text = f"    –î–æ–º–µ–Ω: {domain}"
        
        print(Colorate.Horizontal(Colors.purple_to_blue, link_text, 1))
        print(Colorate.Horizontal(Colors.blue_to_purple, domain_text, 1))
        print(Colorate.Horizontal(Colors.purple_to_blue, "    " + "‚îÄ" * 40, 1))

def open_html_report():
    filename = "search_results.html"
    if os.path.exists(filename):
        webbrowser.open(f'file://{os.path.abspath(filename)}')
        Write.Print("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n", Colors.green_to_blue, interval=0.01)
    else:
        Write.Print("‚ùå –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω\n", Colors.red_to_purple, interval=0.01)

def main():
    install_libraries()
    
    while True:
        clear_console()
        print_banner()
        
        phone_number = Write.Input("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", Colors.purple_to_blue, interval=0.005, hide_cursor=False)
        
        if not phone_number:
            Write.Print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n", Colors.red_to_purple, interval=0.01)
            time.sleep(1)
            continue
        
        Write.Print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–º–µ—Ä–∞...\n", Colors.blue_to_purple, interval=0.01)
        
        analyzer = PhoneAnalyzer(phone_number)
        if analyzer.run_analysis():
            display_phone_results(analyzer.results)
            analysis_results = analyzer.results
        else:
            Write.Print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n", Colors.red_to_purple, interval=0.01)
            analysis_results = {"basic_info": {}, "web_info": {}}
            
        Write.Print("üîé –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –≤ Google...\n", Colors.blue_to_purple, interval=0.01)
        search_results = search_phone_number(phone_number)
        
        if isinstance(search_results, list):
            print_links_to_console(search_results)
            filename = save_links_to_html(search_results, phone_number, analysis_results)
            Write.Print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}\n", Colors.green_to_blue, interval=0.01)
            
            open_report = Write.Input("–û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ? (y/n): ", Colors.purple_to_blue, interval=0.005, hide_cursor=False).lower()
            if open_report == 'y':
                open_html_report()
        else:
            Write.Print(f"‚ùå {search_results}\n", Colors.red_to_purple, interval=0.01)
        
        Write.Input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...", Colors.purple_to_blue, interval=0.005, hide_cursor=False)

if __name__ == "__main__":
    main()